import{M as O,i as C,I as k,N as E,O as R,P as x,D as T,Q as j,m as F,f as M,H as A,j as B,R as H,q as U,S as $,T as y}from"./entry.slxBjbjw.js";const q=n=>n==="defer"||n===!1;function z(...n){var g;const u=typeof n[n.length-1]=="string"?n.pop():void 0;typeof n[0]!="string"&&n.unshift(u);let[a,o,e={}]=n;if(typeof a!="string")throw new TypeError("[nuxt] [asyncData] key must be a string.");if(typeof o!="function")throw new TypeError("[nuxt] [asyncData] handler must be a function.");const t=j(),f=o,p=()=>null,_=()=>t.isHydrating?t.payload.data[a]:t.static.data[a];e.server=e.server??!0,e.default=e.default??p,e.getCachedData=e.getCachedData??_,e.lazy=e.lazy??!1,e.immediate=e.immediate??!0,e.deep=e.deep??O.deep,e.dedupe=e.dedupe??"cancel";const m=()=>![null,void 0].includes(e.getCachedData(a));if(!t._asyncData[a]||!e.immediate){(g=t.payload._errors)[a]??(g[a]=null);const i=e.deep?C:k;t._asyncData[a]={data:i(e.getCachedData(a)??e.default()),pending:C(!m()),error:E(t.payload._errors,a),status:C("idle")}}const s={...t._asyncData[a]};s.refresh=s.execute=(i={})=>{if(t._asyncDataPromises[a]){if(q(i.dedupe??e.dedupe))return t._asyncDataPromises[a];t._asyncDataPromises[a].cancelled=!0}if((i._initial||t.isHydrating&&i._initial!==!1)&&m())return Promise.resolve(e.getCachedData(a));s.pending.value=!0,s.status.value="pending";const l=new Promise((r,c)=>{try{r(f(t))}catch(b){c(b)}}).then(r=>{if(l.cancelled)return t._asyncDataPromises[a];let c=r;e.transform&&(c=e.transform(r)),e.pick&&(c=L(c,e.pick)),t.payload.data[a]=c,s.data.value=c,s.error.value=null,s.status.value="success"}).catch(r=>{if(l.cancelled)return t._asyncDataPromises[a];s.error.value=F(r),s.data.value=M(e.default()),s.status.value="error"}).finally(()=>{l.cancelled||(s.pending.value=!1,delete t._asyncDataPromises[a])});return t._asyncDataPromises[a]=l,t._asyncDataPromises[a]};const v=()=>s.refresh({_initial:!0}),w=e.server!==!1&&t.payload.serverRendered;{const i=A();if(i&&!i._nuxtOnBeforeMountCbs){i._nuxtOnBeforeMountCbs=[];const r=i._nuxtOnBeforeMountCbs;i&&(R(()=>{r.forEach(c=>{c()}),r.splice(0,r.length)}),x(()=>r.splice(0,r.length)))}w&&t.isHydrating&&(s.error.value||m())?(s.pending.value=!1,s.status.value=s.error.value?"error":"success"):i&&(t.payload.serverRendered&&t.isHydrating||e.lazy)&&e.immediate?i._nuxtOnBeforeMountCbs.push(v):e.immediate&&v(),e.watch&&T(e.watch,()=>s.refresh());const l=t.hook("app:data:refresh",async r=>{(!r||r.includes(a))&&await s.refresh()});i&&x(l)}const D=Promise.resolve(t._asyncDataPromises[a]).then(()=>s);return Object.assign(D,s),D}function L(n,u){const a={};for(const o of u)a[o]=n[o];return a}function G(n,u,a){const[o={},e]=typeof u=="string"?[{},u]:[u,a],t=B(()=>{let h=n;return typeof h=="function"&&(h=h()),y(h)}),f=o.key||H([e,typeof t.value=="string"?t.value:"",...S(o)]);if(!f||typeof f!="string")throw new TypeError("[nuxt] [useFetch] key must be a string: "+f);if(!n)throw new Error("[nuxt] [useFetch] request is missing.");const p=f===e?"$f"+f:f;if(!o.baseURL&&typeof t.value=="string"&&t.value[0]==="/"&&t.value[1]==="/")throw new Error('[nuxt] [useFetch] the request URL must not start with "//".');const{server:_,lazy:m,default:s,transform:v,pick:w,watch:D,immediate:g,getCachedData:i,deep:l,...r}=o,c=U({...$,...r,cache:typeof o.cache=="boolean"?void 0:o.cache}),b={server:_,lazy:m,default:s,transform:v,pick:w,immediate:g,getCachedData:i,deep:l,watch:D===!1?[]:[c,t,...D||[]]};let d;return z(p,()=>{var P;(P=d==null?void 0:d.abort)==null||P.call(d),d=typeof AbortController<"u"?new AbortController:{};const h=y(o.timeout);return h&&setTimeout(()=>d.abort(),h),(o.$fetch||globalThis.$fetch)(t.value,{signal:d.signal,...c})},b)}function S(n){var a;const u=[((a=y(n.method))==null?void 0:a.toUpperCase())||"GET",y(n.baseURL)];for(const o of[n.params||n.query]){const e=y(o);if(!e)continue;const t={};for(const[f,p]of Object.entries(e))t[y(f)]=y(p);u.push(t)}return u}export{G as u};
